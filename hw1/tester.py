import socket
from enum import Enum

SERVER_PORT_NUMBER = 15353
BUFFER_SIZE = 4096


class QTYPE(Enum):
    A = '\x00\x01'  # IPv4 Record
    NS = '\x00\x02'  # Name Server Record
    CNAME = '\x00\x05'  # Canonical Name Record
    SOA = '\x00\x06'  # Start of Authority Resource Record (SOARR)
    PTR = '\x00\x0C'  # Pointer Record
    MX = '\x00\x0F'  # Mail Exchanger
    AAAA = '\x00\x1C'  # IPv6 Record
    TXT = '\x00\x10'  # Text Record


class QCLASS(Enum):
    IN = '\x00\x01'  # IN (Internet)


class OPCODE(Enum):
    QUERY = '0000'  # Query
    IQUERY = '0001'  # Inverse Query


class QR(Enum):
    QUESTION = '0'  # Query
    RESPONSE = '1'  # Response


class RCODE(Enum):
    NO_ERROR = '0000'
    FORMAT_ERROR = '0001'
    SERVER_FAILURE = '0010'
    NAME_ERROR = '0011'
    NOT_IMPLEMENTED = '0100'
    REFUSED = '0101'


def QNAME_creator(address):
    QNAME = ''
    for element in str.split(address, '.'):
        QNAME += chr(len(element))
        QNAME += element
        # for letter in list(element):
        #     QNAME += chr(ord(letter))
    QNAME += chr(0)  # end of QNAME
    return QNAME


def flag_generator(qr, opcode, aa, tc, rd, ra, rcode):
    aa = '1' if aa else '0'
    tc = '1' if tc else '0'
    rd = '1' if rd else '0'
    ra = '1' if ra else '0'

    flags_l = chr(int(qr + opcode + aa + tc + rd, 2))
    flags_r = chr(int(ra + '000' + rcode, 2))
    return flags_l + '' + flags_r


def message_id_generator(message_id):
    left_byte = (message_id >> 8) & 0x0FF
    right_byte = (message_id & 0x0FF)

    return chr(left_byte) + '' + chr(right_byte)


def packet_generator(message_id, flags, address, qtype):
    packet = ''
    # packet += '\xAB\xDE'  # Message ID
    packet += message_id_generator(message_id)
    # packet += '\x00\x00'  # Flags (QR, OPCODE, AA, TC, RD, RA, RES, RCODE)
    packet += flags
    packet += '\x00\x01'  # QDCOUNT
    packet += '\x00\x00'  # ANCOUNT
    packet += '\x00\x00'  # NSCOUNT
    packet += '\x00\x00'  # ARCOUNT
    packet += QNAME_creator(address)
    packet += qtype
    packet += QCLASS.IN.value  # fixed by project definition
    return packet


def main():
    udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    udp_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, True)

    try:
        flags = flag_generator(QR.QUESTION.value, OPCODE.QUERY.value,
                               False, False, False, False, RCODE.NO_ERROR.value)
        packet_1 = packet_generator(4560, flags, '98.139.180.149', QTYPE.A.value)

        packet_2 = "\x9b\xf4\x81\x80\x00\x01\x00\x06\x00\x04\x00\x04\x03\x77\x77\x77" \
                   "\x06\x67\x6f\x6f\x67\x6c\x65\x03\x63\x6f\x6d\x00\x00\x01\x00\x01" \
                   "\xc0\x0c\x00\x01\x00\x01\x00\x00\x00\x52\x00\x04\xad\xc2\x4f\x67" \
                   "\xc0\x0c\x00\x01\x00\x01\x00\x00\x00\x52\x00\x04\xad\xc2\x4f\x6a" \
                   "\xc0\x0c\x00\x01\x00\x01\x00\x00\x00\x52\x00\x04\xad\xc2\x4f\x93" \
                   "\xc0\x0c\x00\x01\x00\x01\x00\x00\x00\x52\x00\x04\xad\xc2\x4f\x68" \
                   "\xc0\x0c\x00\x01\x00\x01\x00\x00\x00\x52\x00\x04\xad\xc2\x4f\x63" \
                   "\xc0\x0c\x00\x01\x00\x01\x00\x00\x00\x52\x00\x04\xad\xc2\x4f\x69" \
                   "\xc0\x10\x00\x02\x00\x01\x00\x00\x3e\x7f\x00\x06\x03\x6e\x73\x31" \
                   "\xc0\x10\xc0\x10\x00\x02\x00\x01\x00\x00\x3e\x7f\x00\x06\x03\x6e" \
                   "\x73\x34\xc0\x10\xc0\x10\x00\x02\x00\x01\x00\x00\x3e\x7f\x00\x06" \
                   "\x03\x6e\x73\x33\xc0\x10\xc0\x10\x00\x02\x00\x01\x00\x00\x3e\x7f" \
                   "\x00\x06\x03\x6e\x73\x32\xc0\x10\xc0\x8c\x00\x01\x00\x01\x00\x02" \
                   "\xe1\x9f\x00\x04\xd8\xef\x20\x0a\xc0\xc2\x00\x01\x00\x01\x00\x02" \
                   "\xe1\xb6\x00\x04\xd8\xef\x22\x0a\xc0\xb0\x00\x01\x00\x01\x00\x02" \
                   "\xe1\xa0\x00\x04\xd8\xef\x24\x0a\xc0\x9e\x00\x01\x00\x01\x00\x02" \
                   "\xe1\xa0\x00\x04\xd8\xef\x26\x0a"

        packet_3 = "\xad\x1c\x81\x80\x00\x01\x00\x01\x00\x0d\x00\x0b\x05\x67\x72\x61" \
                   "\x70\x68\x08\x66\x61\x63\x65\x62\x6f\x6f\x6b\x03\x63\x6f\x6d\x00" \
                   "\x00\x01\x00\x01\xc0\x0c\x00\x01\x00\x01\x00\x00\x00\x01\x00\x04" \
                   "\x0a\x0a\x22\x22\xc0\x1b\x00\x02\x00\x01\x00\x00\x0f\xcf\x00\x14" \
                   "\x01\x68\x0c\x67\x74\x6c\x64\x2d\x73\x65\x72\x76\x65\x72\x73\x03" \
                   "\x6e\x65\x74\x00\xc0\x1b\x00\x02\x00\x01\x00\x00\x0f\xcf\x00\x04" \
                   "\x01\x67\xc0\x42\xc0\x1b\x00\x02\x00\x01\x00\x00\x0f\xcf\x00\x04" \
                   "\x01\x64\xc0\x42\xc0\x1b\x00\x02\x00\x01\x00\x00\x0f\xcf\x00\x04" \
                   "\x01\x62\xc0\x42\xc0\x1b\x00\x02\x00\x01\x00\x00\x0f\xcf\x00\x04" \
                   "\x01\x6c\xc0\x42\xc0\x1b\x00\x02\x00\x01\x00\x00\x0f\xcf\x00\x04" \
                   "\x01\x6b\xc0\x42\xc0\x1b\x00\x02\x00\x01\x00\x00\x0f\xcf\x00\x04" \
                   "\x01\x61\xc0\x42\xc0\x1b\x00\x02\x00\x01\x00\x00\x0f\xcf\x00\x04" \
                   "\x01\x69\xc0\x42\xc0\x1b\x00\x02\x00\x01\x00\x00\x0f\xcf\x00\x04" \
                   "\x01\x65\xc0\x42\xc0\x1b\x00\x02\x00\x01\x00\x00\x0f\xcf\x00\x04" \
                   "\x01\x6a\xc0\x42\xc0\x1b\x00\x02\x00\x01\x00\x00\x0f\xcf\x00\x04" \
                   "\x01\x6d\xc0\x42\xc0\x1b\x00\x02\x00\x01\x00\x00\x0f\xcf\x00\x04" \
                   "\x01\x66\xc0\x42\xc0\x1b\x00\x02\x00\x01\x00\x00\x0f\xcf\x00\x04" \
                   "\x01\x63\xc0\x42\xc0\xb0\x00\x01\x00\x01\x00\x00\xdf\x46\x00\x04" \
                   "\xc0\x05\x06\x1e\xc0\xb0\x00\x1c\x00\x01\x00\x01\x40\x70\x00\x10" \
                   "\x20\x01\x05\x03\xa8\x3e\x00\x00\x00\x00\x00\x00\x00\x02\x00\x30" \
                   "\xc0\x80\x00\x01\x00\x01\x00\x00\x18\x7c\x00\x04\xc0\x21\x0e\x1e" \
                   "\xc0\x80\x00\x1c\x00\x01\x00\x00\x18\x7c\x00\x10\x20\x01\x05\x03" \
                   "\x23\x1d\x00\x00\x00\x00\x00\x00\x00\x02\x00\x30\xc1\x10\x00\x01" \
                   "\x00\x01\x00\x01\x4d\x8f\x00\x04\xc0\x1a\x5c\x1e\xc1\x10\x00\x1c" \
                   "\x00\x01\x00\x01\x4f\x10\x00\x10\x20\x01\x05\x03\x83\xeb\x00\x00" \
                   "\x00\x00\x00\x00\x00\x00\x00\x30\xc0\x70\x00\x01\x00\x01\x00\x00" \
                   "\xe4\xab\x00\x04\xc0\x1f\x50\x1e\xc0\x70\x00\x1c\x00\x01\x00\x00" \
                   "\xe4\xab\x00\x10\x20\x01\x05\x00\x85\x6e\x00\x00\x00\x00\x00\x00" \
                   "\x00\x00\x00\x30\xc0\xd0\x00\x01\x00\x01\x00\x00\x62\x2b\x00\x04" \
                   "\xc0\x0c\x5e\x1e\xc0\xd0\x00\x1c\x00\x01\x00\x00\x62\x2c\x00\x10" \
                   "\x20\x01\x05\x02\x1c\xa1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x30" \
                   "\xc1\x00\x00\x01\x00\x01\x00\x00\x77\xfe\x00\x04\xc0\x23\x33\x1e"

        packet_4 = "\x77\xab\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x06\x67\x69\x74\x68\x75\x62\x03\x63\x6f\x6d\x00" \
                   "\x00\x01\x00\x01"

        flags = flag_generator(QR.QUESTION.value, OPCODE.QUERY.value,
                               False, False, False, False, RCODE.NO_ERROR.value)
        packet_5 = packet_generator(17346, flags, '81.31.160.34', QTYPE.A.value)

        print(packet_5)

        server_address = ('', 15353)
        udp_socket.sendto(packet_5.encode('Latin-1'), server_address)

    except KeyboardInterrupt:
        udp_socket.close()
        exit(0)


if __name__ == '__main__':
    main()